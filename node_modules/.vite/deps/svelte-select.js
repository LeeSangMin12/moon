import {
  autoUpdate,
  computePosition,
  flip,
  offset,
  shift
} from "./chunk-QLN4JVEP.js";
import "./chunk-HVEOHPWL.js";
import "./chunk-ZWFXF6PQ.js";
import "./chunk-MXWSQ4GM.js";
import "./chunk-PUNUQJN7.js";
import {
  action,
  add_locations,
  append_styles,
  beforeUpdate,
  bind_prop,
  bind_this,
  bind_value,
  bubble_event,
  check_target,
  cleanup_styles,
  createEventDispatcher,
  each,
  hmr,
  if_block,
  index,
  init,
  legacy_api,
  onDestroy,
  onMount,
  prop,
  remove_input_defaults,
  sanitize_slots,
  set_attribute,
  set_attributes,
  set_class,
  set_style,
  set_value,
  slot
} from "./chunk-IZVNW7ZB.js";
import "./chunk-U7P2NEEE.js";
import {
  append,
  comment,
  ns_template,
  preventDefault,
  set_text,
  stopPropagation,
  template,
  text
} from "./chunk-RJJPLISB.js";
import {
  $window,
  FILENAME,
  HMR,
  child,
  deep_read_state,
  derived_safe_equal,
  effect,
  event,
  first_child,
  get,
  legacy_pre_effect,
  legacy_pre_effect_reset,
  mutable_source,
  mutate,
  pop,
  push,
  reset,
  set,
  sibling,
  strict_equals,
  template_effect,
  tick
} from "./chunk-UCX3ZP2K.js";
import "./chunk-NXGWPDOQ.js";
import "./chunk-HNWPC2PS.js";
import "./chunk-RIXFT5AQ.js";
import "./chunk-RVAV4ZRS.js";
import "./chunk-HFZ37CMS.js";

// node_modules/svelte-floating-ui/index.js
function createFloatingActions(initOptions) {
  let referenceElement;
  let floatingElement;
  const defaultOptions = {
    autoUpdate: true
  };
  let options = initOptions;
  const getOptions = (mixin) => {
    return { ...defaultOptions, ...initOptions || {}, ...mixin || {} };
  };
  const updatePosition = (updateOptions) => {
    if (referenceElement && floatingElement) {
      options = getOptions(updateOptions);
      computePosition(referenceElement, floatingElement, options).then((v) => {
        Object.assign(floatingElement.style, {
          position: v.strategy,
          left: `${v.x}px`,
          top: `${v.y}px`
        });
        (options == null ? void 0 : options.onComputed) && options.onComputed(v);
      });
    }
  };
  const referenceAction = (node) => {
    if ("subscribe" in node) {
      setupVirtualElementObserver(node);
      return {};
    } else {
      referenceElement = node;
      updatePosition();
    }
  };
  const contentAction = (node, contentOptions) => {
    let autoUpdateDestroy;
    floatingElement = node;
    options = getOptions(contentOptions);
    setTimeout(() => updatePosition(contentOptions), 0);
    updatePosition(contentOptions);
    const destroyAutoUpdate = () => {
      if (autoUpdateDestroy) {
        autoUpdateDestroy();
        autoUpdateDestroy = void 0;
      }
    };
    const initAutoUpdate = ({ autoUpdate: autoUpdate2 } = options || {}) => {
      destroyAutoUpdate();
      if (autoUpdate2 !== false) {
        tick().then(() => {
          return autoUpdate(referenceElement, floatingElement, () => updatePosition(options), autoUpdate2 === true ? {} : autoUpdate2);
        });
      }
      return;
    };
    autoUpdateDestroy = initAutoUpdate();
    return {
      update(contentOptions2) {
        updatePosition(contentOptions2);
        autoUpdateDestroy = initAutoUpdate(contentOptions2);
      },
      destroy() {
        destroyAutoUpdate();
      }
    };
  };
  const setupVirtualElementObserver = (node) => {
    const unsubscribe = node.subscribe(($node) => {
      if (referenceElement === void 0) {
        referenceElement = $node;
        updatePosition();
      } else {
        Object.assign(referenceElement, $node);
        updatePosition();
      }
    });
    onDestroy(unsubscribe);
  };
  return [
    referenceAction,
    contentAction,
    updatePosition
  ];
}

// node_modules/svelte-select/filter.js
function filter({
  loadOptions,
  filterText,
  items,
  multiple,
  value,
  itemId,
  groupBy,
  filterSelectedItems,
  itemFilter,
  convertStringItemsToObjects,
  filterGroupedItems,
  label
}) {
  if (items && loadOptions) return items;
  if (!items) return [];
  if (items && items.length > 0 && typeof items[0] !== "object") {
    items = convertStringItemsToObjects(items);
  }
  let filterResults = items.filter((item) => {
    let matchesFilter = itemFilter(item[label], filterText, item);
    if (matchesFilter && multiple && (value == null ? void 0 : value.length)) {
      matchesFilter = !value.some((x) => {
        return filterSelectedItems ? x[itemId] === item[itemId] : false;
      });
    }
    return matchesFilter;
  });
  if (groupBy) {
    filterResults = filterGroupedItems(filterResults);
  }
  return filterResults;
}

// node_modules/svelte-select/get-items.js
async function getItems({ dispatch, loadOptions, convertStringItemsToObjects, filterText }) {
  let res = await loadOptions(filterText).catch((err) => {
    console.warn("svelte-select loadOptions error :>> ", err);
    dispatch("error", { type: "loadOptions", details: err });
  });
  if (res && !res.cancelled) {
    if (res) {
      if (res && res.length > 0 && typeof res[0] !== "object") {
        res = convertStringItemsToObjects(res);
      }
      dispatch("loaded", { items: res });
    } else {
      res = [];
    }
    return {
      filteredItems: res,
      loading: false,
      focused: true,
      listOpen: true
    };
  }
}

// node_modules/svelte-select/ChevronIcon.svelte
ChevronIcon[FILENAME] = "node_modules/svelte-select/ChevronIcon.svelte";
var root = add_locations(
  ns_template(`<svg width="100%" height="100%" viewBox="0 0 20 20" focusable="false" aria-hidden="true" class="s-QgxznJPnsKqF"><path fill="currentColor" d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747
          3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0
          1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502
          0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0
          0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"></path></svg>`),
  ChevronIcon[FILENAME],
  [[1, 0, [[7, 4]]]]
);
var $$css = {
  hash: "s-QgxznJPnsKqF",
  code: "\n  svg.s-QgxznJPnsKqF {\n      width: var(--chevron-icon-width, 20px);\n      height: var(--chevron-icon-width, 20px);\n      color: var(--chevron-icon-colour, currentColor);\n  }\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2hldnJvbkljb24uc3ZlbHRlIiwibWFwcGluZ3MiOiI7QUFnQkEsRUFBRSxrQkFBRyxDQUFDO0FBQ04sTUFBTSxzQ0FBc0M7QUFDNUMsTUFBTSx1Q0FBdUM7QUFDN0MsTUFBTSwrQ0FBK0M7QUFDckQiLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VzIjpbIkNoZXZyb25JY29uLnN2ZWx0ZSJdfQ== */"
};
function ChevronIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ChevronIcon);
  append_styles($$anchor, $$css);
  var svg = root();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ChevronIcon = hmr(ChevronIcon, () => ChevronIcon[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-QgxznJPnsKqF");
    module.default[HMR].source = ChevronIcon[HMR].source;
    set(ChevronIcon[HMR].source, module.default[HMR].original);
  });
}
var ChevronIcon_default = ChevronIcon;

// node_modules/svelte-select/ClearIcon.svelte
ClearIcon[FILENAME] = "node_modules/svelte-select/ClearIcon.svelte";
var root2 = add_locations(
  ns_template(`<svg width="100%" height="100%" viewBox="-2 -2 50 50" focusable="false" aria-hidden="true" role="presentation" class="s-DTAJLbx7YMGx"><path fill="currentColor" d="M34.923,37.251L24,26.328L13.077,37.251L9.436,33.61l10.923-10.923L9.436,11.765l3.641-3.641L24,19.047L34.923,8.124
    l3.641,3.641L27.641,22.688L38.564,33.61L34.923,37.251z"></path></svg>`),
  ClearIcon[FILENAME],
  [[1, 0, [[9, 4]]]]
);
var $$css2 = {
  hash: "s-DTAJLbx7YMGx",
  code: "\n    svg.s-DTAJLbx7YMGx {\n        width: var(--clear-icon-width, 20px);\n        height: var(--clear-icon-width, 20px);\n        color: var(--clear-icon-color, currentColor);\n    }\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xlYXJJY29uLnN2ZWx0ZSIsIm1hcHBpbmdzIjoiO0FBZ0JBLElBQUksa0JBQUcsQ0FBQztBQUNSLFFBQVEsb0NBQW9DO0FBQzVDLFFBQVEscUNBQXFDO0FBQzdDLFFBQVEsNENBQTRDO0FBQ3BEIiwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlcyI6WyJDbGVhckljb24uc3ZlbHRlIl19 */"
};
function ClearIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, ClearIcon);
  append_styles($$anchor, $$css2);
  var svg = root2();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  ClearIcon = hmr(ClearIcon, () => ClearIcon[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-DTAJLbx7YMGx");
    module.default[HMR].source = ClearIcon[HMR].source;
    set(ClearIcon[HMR].source, module.default[HMR].original);
  });
}
var ClearIcon_default = ClearIcon;

// node_modules/svelte-select/LoadingIcon.svelte
LoadingIcon[FILENAME] = "node_modules/svelte-select/LoadingIcon.svelte";
var root3 = add_locations(ns_template(`<svg class="loading s-uZFqudMWDmAq" viewBox="25 25 50 50"><circle class="circle_path s-uZFqudMWDmAq" cx="50" cy="50" r="20" fill="none" stroke="currentColor" stroke-width="5" stroke-miterlimit="10"></circle></svg>`), LoadingIcon[FILENAME], [[1, 0, [[2, 4]]]]);
var $$css3 = {
  hash: "s-uZFqudMWDmAq",
  code: "\n    .loading.s-uZFqudMWDmAq {\n        width: var(--spinner-width, 20px);\n        height: var(--spinner-height, 20px);\n        color: var(--spinner-color, var(--icons-color));\n        animation: s-uZFqudMWDmAq-rotate 0.75s linear infinite;\n        transform-origin: center center;\n        transform: none;\n    }\n\n    .circle_path.s-uZFqudMWDmAq {\n        stroke-dasharray: 90;\n        stroke-linecap: round;\n    }\n\n    @keyframes s-uZFqudMWDmAq-rotate {\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTG9hZGluZ0ljb24uc3ZlbHRlIiwibWFwcGluZ3MiOiI7QUFhQSxJQUFJLHVCQUFRLENBQUM7QUFDYixRQUFRLGlDQUFpQztBQUN6QyxRQUFRLG1DQUFtQztBQUMzQyxRQUFRLCtDQUErQztBQUN2RCxRQUFRLDBCQUFXLDRCQUE0QjtBQUMvQyxRQUFRLCtCQUErQjtBQUN2QyxRQUFRLGVBQWU7QUFDdkI7O0FBRUEsSUFBSSwyQkFBWSxDQUFDO0FBQ2pCLFFBQVEsb0JBQW9CO0FBQzVCLFFBQVEscUJBQXFCO0FBQzdCOztBQUVBLElBQUksMEJBQVc7QUFDZjtBQUNBO0FBQ0E7QUFDQSIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiTG9hZGluZ0ljb24uc3ZlbHRlIl19 */"
};
function LoadingIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, LoadingIcon);
  append_styles($$anchor, $$css3);
  var svg = root3();
  append($$anchor, svg);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  LoadingIcon = hmr(LoadingIcon, () => LoadingIcon[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-uZFqudMWDmAq");
    module.default[HMR].source = LoadingIcon[HMR].source;
    set(LoadingIcon[HMR].source, module.default[HMR].original);
  });
}
var LoadingIcon_default = LoadingIcon;

// node_modules/svelte-select/Select.svelte
Select[FILENAME] = "node_modules/svelte-select/Select.svelte";
var root_6 = add_locations(template(`<div class="list-item s-413vZPMk7oiT" tabindex="-1" role="none"><div><!></div></div>`), Select[FILENAME], [[700, 20, [[708, 24]]]]);
var root_10 = add_locations(template(`<div class="empty s-413vZPMk7oiT">No options</div>`), Select[FILENAME], [[726, 20]]);
var root_1 = add_locations(template(`<div role="none"><!> <!> <!></div>`), Select[FILENAME], [[687, 8]]);
var root_12 = add_locations(template(`<span id="aria-selection" class="s-413vZPMk7oiT"> </span> <span id="aria-context" class="s-413vZPMk7oiT"> </span>`, 1), Select[FILENAME], [[735, 12], [736, 12]]);
var root_17 = add_locations(template(`<div class="multi-item-clear s-413vZPMk7oiT"><!></div>`), Select[FILENAME], [[764, 28]]);
var root_15 = add_locations(template(`<div role="none"><span class="multi-item-text s-413vZPMk7oiT"><!></span> <!></div>`), Select[FILENAME], [[750, 20, [[757, 24]]]]);
var root_19 = add_locations(template(`<div><!></div>`), Select[FILENAME], [[775, 16]]);
var root_21 = add_locations(template(`<div class="icon loading s-413vZPMk7oiT" aria-hidden="true"><!></div>`), Select[FILENAME], [[798, 12]]);
var root_23 = add_locations(template(`<button type="button" class="icon clear-select s-413vZPMk7oiT"><!></button>`), Select[FILENAME], [[806, 12]]);
var root_25 = add_locations(template(`<div class="icon chevron s-413vZPMk7oiT" aria-hidden="true"><!></div>`), Select[FILENAME], [[814, 12]]);
var root_27 = add_locations(template(`<input type="hidden" class="s-413vZPMk7oiT">`), Select[FILENAME], [[823, 8]]);
var root_29 = add_locations(template(`<select class="required s-413vZPMk7oiT" required tabindex="-1" aria-hidden="true"></select>`), Select[FILENAME], [[828, 12]]);
var root4 = add_locations(template(`<div role="none"><!> <span aria-live="polite" aria-atomic="false" aria-relevant="additions text" class="a11y-text s-413vZPMk7oiT"><!></span> <div class="prepend s-413vZPMk7oiT"><!></div> <div class="value-container s-413vZPMk7oiT"><!> <input></div> <div class="indicators s-413vZPMk7oiT"><!> <!> <!></div> <!> <!></div>`), Select[FILENAME], [
  [
    673,
    0,
    [
      [733, 4],
      [742, 4],
      [746, 4, [[783, 8]]],
      [796, 4]
    ]
  ]
]);
var $$css4 = {
  hash: "s-413vZPMk7oiT",
  code: "\n    .svelte-select.s-413vZPMk7oiT {\n        /* deprecating camelCase custom props in favour of kebab-case for v5 */\n        --borderRadius: var(--border-radius);\n        --clearSelectColor: var(--clear-select-color);\n        --clearSelectWidth: var(--clear-select-width);\n        --disabledBackground: var(--disabled-background);\n        --disabledBorderColor: var(--disabled-border-color);\n        --disabledColor: var(--disabled-color);\n        --disabledPlaceholderColor: var(--disabled-placeholder-color);\n        --disabledPlaceholderOpacity: var(--disabled-placeholder-opacity);\n        --errorBackground: var(--error-background);\n        --errorBorder: var(--error-border);\n        --groupItemPaddingLeft: var(--group-item-padding-left);\n        --groupTitleColor: var(--group-title-color);\n        --groupTitleFontSize: var(--group-title-font-size);\n        --groupTitleFontWeight: var(--group-title-font-weight);\n        --groupTitlePadding: var(--group-title-padding);\n        --groupTitleTextTransform: var(--group-title-text-transform);\n        --groupTitleBorderColor: var(--group-title-border-color);\n        --groupTitleBorderWidth: var(--group-title-border-width);\n        --groupTitleBorderStyle: var(--group-title-border-style);\n        --indicatorColor: var(--chevron-color);\n        --indicatorHeight: var(--chevron-height);\n        --indicatorWidth: var(--chevron-width);\n        --inputColor: var(--input-color);\n        --inputLeft: var(--input-left);\n        --inputLetterSpacing: var(--input-letter-spacing);\n        --inputMargin: var(--input-margin);\n        --inputPadding: var(--input-padding);\n        --itemActiveBackground: var(--item-active-background);\n        --itemColor: var(--item-color);\n        --itemFirstBorderRadius: var(--item-first-border-radius);\n        --itemHoverBG: var(--item-hover-bg);\n        --itemHoverColor: var(--item-hover-color);\n        --itemIsActiveBG: var(--item-is-active-bg);\n        --itemIsActiveColor: var(--item-is-active-color);\n        --itemIsNotSelectableColor: var(--item-is-not-selectable-color);\n        --itemPadding: var(--item-padding);\n        --listBackground: var(--list-background);\n        --listBorder: var(--list-border);\n        --listBorderRadius: var(--list-border-radius);\n        --listEmptyColor: var(--list-empty-color);\n        --listEmptyPadding: var(--list-empty-padding);\n        --listEmptyTextAlign: var(--list-empty-text-align);\n        --listMaxHeight: var(--list-max-height);\n        --listPosition: var(--list-position);\n        --listShadow: var(--list-shadow);\n        --listZIndex: var(--list-z-index);\n        --multiItemBG: var(--multi-item-bg);\n        --multiItemBorderRadius: var(--multi-item-border-radius);\n        --multiItemDisabledHoverBg: var(--multi-item-disabled-hover-bg);\n        --multiItemDisabledHoverColor: var(--multi-item-disabled-hover-color);\n        --multiItemHeight: var(--multi-item-height);\n        --multiItemMargin: var(--multi-item-margin);\n        --multiItemPadding: var(--multi-item-padding);\n        --multiSelectInputMargin: var(--multi-select-input-margin);\n        --multiSelectInputPadding: var(--multi-select-input-padding);\n        --multiSelectPadding: var(--multi-select-padding);\n        --placeholderColor: var(--placeholder-color);\n        --placeholderOpacity: var(--placeholder-opacity);\n        --selectedItemPadding: var(--selected-item-padding);\n        --spinnerColor: var(--spinner-color);\n        --spinnerHeight: var(--spinner-height);\n        --spinnerWidth: var(--spinner-width);\n\n        --internal-padding: 0 0 0 16px;\n\n        border: var(--border, 1px solid #d8dbdf);\n        border-radius: var(--border-radius, 6px);\n        min-height: var(--height, 42px);\n        position: relative;\n        display: flex;\n        align-items: stretch;\n        padding: var(--padding, var(--internal-padding));\n        background: var(--background, #fff);\n        margin: var(--margin, 0);\n        width: var(--width, 100%);\n        font-size: var(--font-size, 16px);\n        max-height: var(--max-height);\n    }\n\n    .s-413vZPMk7oiT {\n        box-sizing: var(--box-sizing, border-box);\n    }\n\n    .svelte-select.s-413vZPMk7oiT:hover {\n        border: var(--border-hover, 1px solid #b2b8bf);\n    }\n\n    .value-container.s-413vZPMk7oiT {\n        display: flex;\n        flex: 1 1 0%;\n        flex-wrap: wrap;\n        align-items: center;\n        gap: 5px 10px;\n        padding: var(--value-container-padding, 5px 0);\n        position: relative;\n        overflow: var(--value-container-overflow, hidden);\n        align-self: stretch;\n    }\n\n    .prepend.s-413vZPMk7oiT,\n    .indicators.s-413vZPMk7oiT {\n        display: flex;\n        flex-shrink: 0;\n        align-items: center;\n    }\n\n    .indicators.s-413vZPMk7oiT {\n        position: var(--indicators-position);\n        top: var(--indicators-top);\n        right: var(--indicators-right);\n        bottom: var(--indicators-bottom);\n    }\n\n    input.s-413vZPMk7oiT {\n        position: absolute;\n        cursor: default;\n        border: none;\n        color: var(--input-color, var(--item-color));\n        padding: var(--input-padding, 0);\n        letter-spacing: var(--input-letter-spacing, inherit);\n        margin: var(--input-margin, 0);\n        min-width: 10px;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        background: transparent;\n        font-size: var(--font-size, 16px);\n    }\n\n    .s-413vZPMk7oiT:not(.multi) > .value-container:where(.s-413vZPMk7oiT) > input:where(.s-413vZPMk7oiT) {\n        width: 100%;\n        height: 100%;\n    }\n\n    input.s-413vZPMk7oiT::placeholder {\n        color: var(--placeholder-color, #78848f);\n        opacity: var(--placeholder-opacity, 1);\n    }\n\n    input.s-413vZPMk7oiT:focus {\n        outline: none;\n    }\n\n    .svelte-select.focused.s-413vZPMk7oiT {\n        border: var(--border-focused, 1px solid #006fe8);\n        border-radius: var(--border-radius-focused, var(--border-radius, 6px));\n    }\n\n    .disabled.s-413vZPMk7oiT {\n        background: var(--disabled-background, #ebedef);\n        border-color: var(--disabled-border-color, #ebedef);\n        color: var(--disabled-color, #c1c6cc);\n    }\n\n    .disabled.s-413vZPMk7oiT input:where(.s-413vZPMk7oiT)::placeholder {\n        color: var(--disabled-placeholder-color, #c1c6cc);\n        opacity: var(--disabled-placeholder-opacity, 1);\n    }\n\n    .selected-item.s-413vZPMk7oiT {\n        position: relative;\n        overflow: var(--selected-item-overflow, hidden);\n        padding: var(--selected-item-padding, 0 20px 0 0);\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        color: var(--selected-item-color, inherit);\n        font-size: var(--font-size, 16px);\n    }\n\n    .multi.s-413vZPMk7oiT .selected-item:where(.s-413vZPMk7oiT) {\n        position: absolute;\n        line-height: var(--height, 42px);\n        height: var(--height, 42px);\n    }\n\n    .selected-item.s-413vZPMk7oiT:focus {\n        outline: none;\n    }\n\n    .hide-selected-item.s-413vZPMk7oiT {\n        opacity: 0;\n    }\n\n    .icon.s-413vZPMk7oiT {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n    }\n\n    .clear-select.s-413vZPMk7oiT {\n        all: unset;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: var(--clear-select-width, 40px);\n        height: var(--clear-select-height, 100%);\n        color: var(--clear-select-color, var(--icons-color));\n        margin: var(--clear-select-margin, 0);\n        pointer-events: all;\n        flex-shrink: 0;\n    }\n\n    .clear-select.s-413vZPMk7oiT:focus {\n        outline: var(--clear-select-focus-outline, 1px solid #006fe8);\n    }\n\n    .loading.s-413vZPMk7oiT {\n        width: var(--loading-width, 40px);\n        height: var(--loading-height);\n        color: var(--loading-color, var(--icons-color));\n        margin: var(--loading--margin, 0);\n        flex-shrink: 0;\n    }\n\n    .chevron.s-413vZPMk7oiT {\n        width: var(--chevron-width, 40px);\n        height: var(--chevron-height, 40px);\n        background: var(--chevron-background, transparent);\n        pointer-events: var(--chevron-pointer-events, none);\n        color: var(--chevron-color, var(--icons-color));\n        border: var(--chevron-border, 0 0 0 1px solid #d8dbdf);\n        flex-shrink: 0;\n    }\n\n    .multi.s-413vZPMk7oiT {\n        padding: var(--multi-select-padding, var(--internal-padding));\n    }\n\n    .multi.s-413vZPMk7oiT input:where(.s-413vZPMk7oiT) {\n        padding: var(--multi-select-input-padding, 0);\n        position: relative;\n        margin: var(--multi-select-input-margin, 5px 0);\n        flex: 1 1 40px;\n    }\n\n    .svelte-select.error.s-413vZPMk7oiT {\n        border: var(--error-border, 1px solid #ff2d55);\n        background: var(--error-background, #fff);\n    }\n\n    .a11y-text.s-413vZPMk7oiT {\n        z-index: 9999;\n        border: 0px;\n        clip: rect(1px, 1px, 1px, 1px);\n        height: 1px;\n        width: 1px;\n        position: absolute;\n        overflow: hidden;\n        padding: 0px;\n        white-space: nowrap;\n    }\n\n    .multi-item.s-413vZPMk7oiT {\n        background: var(--multi-item-bg, #ebedef);\n        margin: var(--multi-item-margin, 0);\n        outline: var(--multi-item-outline, 1px solid #ddd);\n        border-radius: var(--multi-item-border-radius, 4px);\n        height: var(--multi-item-height, 25px);\n        line-height: var(--multi-item-height, 25px);\n        display: flex;\n        cursor: default;\n        padding: var(--multi-item-padding, 0 5px);\n        overflow: hidden;\n        gap: var(--multi-item-gap, 4px);\n        outline-offset: -1px;\n        max-width: var(--multi-max-width, none);\n        color: var(--multi-item-color, var(--item-color));\n    }\n\n    .multi-item.disabled.s-413vZPMk7oiT:hover {\n        background: var(--multi-item-disabled-hover-bg, #ebedef);\n        color: var(--multi-item-disabled-hover-color, #c1c6cc);\n    }\n\n    .multi-item-text.s-413vZPMk7oiT {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n    }\n\n    .multi-item-clear.s-413vZPMk7oiT {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        --clear-icon-color: var(--multi-item-clear-icon-color, #000);\n    }\n\n    .multi-item.active.s-413vZPMk7oiT {\n        outline: var(--multi-item-active-outline, 1px solid #006fe8);\n    }\n\n    .svelte-select-list.s-413vZPMk7oiT {\n        box-shadow: var(--list-shadow, 0 2px 3px 0 rgba(44, 62, 80, 0.24));\n        border-radius: var(--list-border-radius, 4px);\n        max-height: var(--list-max-height, 252px);\n        overflow-y: auto;\n        background: var(--list-background, #fff);\n        position: var(--list-position, absolute);\n        z-index: var(--list-z-index, 2);\n        border: var(--list-border);\n    }\n\n    .prefloat.s-413vZPMk7oiT {\n        opacity: 0;\n        pointer-events: none;\n    }\n\n    .list-group-title.s-413vZPMk7oiT {\n        color: var(--group-title-color, #8f8f8f);\n        cursor: default;\n        font-size: var(--group-title-font-size, 16px);\n        font-weight: var(--group-title-font-weight, 600);\n        height: var(--height, 42px);\n        line-height: var(--height, 42px);\n        padding: var(--group-title-padding, 0 20px);\n        text-overflow: ellipsis;\n        overflow-x: hidden;\n        white-space: nowrap;\n        text-transform: var(--group-title-text-transform, uppercase);\n        border-width: var(--group-title-border-width, medium);\n        border-style: var(--group-title-border-style, none);\n        border-color: var(--group-title-border-color, color);\n    }\n\n    .empty.s-413vZPMk7oiT {\n        text-align: var(--list-empty-text-align, center);\n        padding: var(--list-empty-padding, 20px 0);\n        color: var(--list-empty-color, #78848f);\n    }\n\n    .item.s-413vZPMk7oiT {\n        cursor: default;\n        height: var(--item-height, var(--height, 42px));\n        line-height: var(--item-line-height, var(--height, 42px));\n        padding: var(--item-padding, 0 20px);\n        color: var(--item-color, inherit);\n        text-overflow: ellipsis;\n        overflow: hidden;\n        white-space: nowrap;\n        transition: var(--item-transition, all 0.2s);\n        align-items: center;\n        width: 100%;\n    }\n\n    .item.group-item.s-413vZPMk7oiT {\n        padding-left: var(--group-item-padding-left, 40px);\n    }\n\n    .item.s-413vZPMk7oiT:active {\n        background: var(--item-active-background, #b9daff);\n    }\n\n    .item.active.s-413vZPMk7oiT {\n        background: var(--item-is-active-bg, #007aff);\n        color: var(--item-is-active-color, #fff);\n    }\n\n    .item.first.s-413vZPMk7oiT {\n        border-radius: var(--item-first-border-radius, 4px 4px 0 0);\n    }\n\n    .item.hover.s-413vZPMk7oiT:not(.active) {\n        background: var(--item-hover-bg, #e7f2ff);\n        color: var(--item-hover-color, inherit);\n    }\n\n    .item.not-selectable.s-413vZPMk7oiT,\n    .item.hover.item.not-selectable.s-413vZPMk7oiT,\n    .item.active.item.not-selectable.s-413vZPMk7oiT,\n    .item.not-selectable.s-413vZPMk7oiT:active {\n        color: var(--item-is-not-selectable-color, #999);\n        background: transparent;\n    }\n\n    .required.s-413vZPMk7oiT {\n        opacity: 0;\n        z-index: -1;\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n    }\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};
function Select($$anchor, $$props) {
  check_target(new.target);
  const $$slots = sanitize_slots($$props);
  push($$props, false, Select);
  append_styles($$anchor, $$css4);
  const hasValue = mutable_source();
  const hideSelectedItem = mutable_source();
  const showClear = mutable_source();
  const placeholderText = mutable_source();
  const ariaSelection = mutable_source();
  const ariaContext = mutable_source();
  const filteredItems = mutable_source();
  const listDom = mutable_source();
  const scrollToHoverItem = mutable_source();
  const dispatch = createEventDispatcher();
  let justValue = prop($$props, "justValue", 12, null);
  let filter2 = prop($$props, "filter", 8, filter);
  let getItems2 = prop($$props, "getItems", 8, getItems);
  let id = prop($$props, "id", 8, null);
  let name = prop($$props, "name", 8, null);
  let container = prop($$props, "container", 12, void 0);
  let input = prop($$props, "input", 12, void 0);
  let multiple = prop($$props, "multiple", 8, false);
  let multiFullItemClearable = prop($$props, "multiFullItemClearable", 8, false);
  let disabled = prop($$props, "disabled", 8, false);
  let focused = prop($$props, "focused", 12, false);
  let value = prop($$props, "value", 12, null);
  let filterText = prop($$props, "filterText", 12, "");
  let placeholder = prop($$props, "placeholder", 8, "Please select");
  let placeholderAlwaysShow = prop($$props, "placeholderAlwaysShow", 8, false);
  let items = prop($$props, "items", 12, null);
  let label = prop($$props, "label", 8, "label");
  let itemFilter = prop($$props, "itemFilter", 8, (label2, filterText2, option) => `${label2}`.toLowerCase().includes(filterText2.toLowerCase()));
  let groupBy = prop($$props, "groupBy", 8, void 0);
  let groupFilter = prop($$props, "groupFilter", 8, (groups) => groups);
  let groupHeaderSelectable = prop($$props, "groupHeaderSelectable", 8, false);
  let itemId = prop($$props, "itemId", 8, "value");
  let loadOptions = prop($$props, "loadOptions", 8, void 0);
  let containerStyles = prop($$props, "containerStyles", 8, "");
  let hasError = prop($$props, "hasError", 8, false);
  let filterSelectedItems = prop($$props, "filterSelectedItems", 8, true);
  let required = prop($$props, "required", 8, false);
  let closeListOnChange = prop($$props, "closeListOnChange", 8, true);
  let clearFilterTextOnBlur = prop($$props, "clearFilterTextOnBlur", 8, true);
  let createGroupHeaderItem = prop($$props, "createGroupHeaderItem", 8, (groupValue, item) => {
    return { value: groupValue, [label()]: groupValue };
  });
  const getFilteredItems = () => {
    return get(filteredItems);
  };
  let searchable = prop($$props, "searchable", 8, true);
  let inputStyles = prop($$props, "inputStyles", 8, "");
  let clearable = prop($$props, "clearable", 8, true);
  let loading = prop($$props, "loading", 12, false);
  let listOpen = prop($$props, "listOpen", 12, false);
  let timeout;
  let debounce = prop($$props, "debounce", 8, (fn, wait = 1) => {
    clearTimeout(timeout);
    timeout = setTimeout(fn, wait);
  });
  let debounceWait = prop($$props, "debounceWait", 8, 300);
  let hideEmptyState = prop($$props, "hideEmptyState", 8, false);
  let inputAttributes = prop($$props, "inputAttributes", 24, () => ({}));
  let listAutoWidth = prop($$props, "listAutoWidth", 8, true);
  let showChevron = prop($$props, "showChevron", 8, false);
  let listOffset = prop($$props, "listOffset", 8, 5);
  let hoverItemIndex = prop($$props, "hoverItemIndex", 12, 0);
  let floatingConfig = prop($$props, "floatingConfig", 24, () => ({}));
  let containerClasses = prop($$props, "class", 8, "");
  let activeValue = mutable_source();
  let prev_value = mutable_source();
  let prev_filterText = mutable_source();
  let prev_multiple = mutable_source();
  function setValue() {
    if (strict_equals(typeof value(), "string")) {
      let item = (items() || []).find((item2) => strict_equals(item2[itemId()], value()));
      value(item || {
        [itemId()]: value(),
        label: value()
      });
    } else if (multiple() && Array.isArray(value()) && value().length > 0) {
      value(value().map((item) => strict_equals(typeof item, "string") ? { value: item, label: item } : item));
    }
  }
  let _inputAttributes = mutable_source();
  function assignInputAttributes() {
    set(_inputAttributes, Object.assign(
      {
        autocapitalize: "none",
        autocomplete: "off",
        autocorrect: "off",
        spellcheck: false,
        tabindex: 0,
        type: "text",
        "aria-autocomplete": "list"
      },
      inputAttributes()
    ));
    if (id()) {
      mutate(_inputAttributes, get(_inputAttributes)["id"] = id());
    }
    if (!searchable()) {
      mutate(_inputAttributes, get(_inputAttributes)["readonly"] = true);
    }
  }
  function convertStringItemsToObjects(_items) {
    return _items.map((item, index2) => {
      return { index: index2, value: item, label: `${item}` };
    });
  }
  function filterGroupedItems(_items) {
    const groupValues = [];
    const groups = {};
    _items.forEach((item) => {
      const groupValue = groupBy()(item);
      if (!groupValues.includes(groupValue)) {
        groupValues.push(groupValue);
        groups[groupValue] = [];
        if (groupValue) {
          groups[groupValue].push(Object.assign(createGroupHeaderItem()(groupValue, item), {
            id: groupValue,
            groupHeader: true,
            selectable: groupHeaderSelectable()
          }));
        }
      }
      groups[groupValue].push(Object.assign({ groupItem: !!groupValue }, item));
    });
    const sortedGroupedItems = [];
    groupFilter()(groupValues).forEach((groupValue) => {
      if (groups[groupValue]) sortedGroupedItems.push(...groups[groupValue]);
    });
    return sortedGroupedItems;
  }
  function dispatchSelectedItem() {
    if (multiple()) {
      if (strict_equals(JSON.stringify(value()), JSON.stringify(get(prev_value)), false)) {
        if (checkValueForDuplicates()) {
          dispatch("input", value());
        }
      }
      return;
    }
    if (!get(prev_value) || strict_equals(JSON.stringify(value()[itemId()]), JSON.stringify(get(prev_value)[itemId()]), false)) {
      dispatch("input", value());
    }
  }
  function setupMulti() {
    if (value()) {
      if (Array.isArray(value())) {
        value([...value()]);
      } else {
        value([value()]);
      }
    }
  }
  function setupSingle() {
    if (value()) value(null);
  }
  function setValueIndexAsHoverIndex() {
    const valueIndex = get(filteredItems).findIndex((i) => {
      return strict_equals(i[itemId()], value()[itemId()]);
    });
    checkHoverSelectable(valueIndex, true);
  }
  function dispatchHover(i) {
    dispatch("hoverItem", i);
  }
  function checkHoverSelectable(startingIndex = 0, ignoreGroup) {
    hoverItemIndex(startingIndex < 0 ? 0 : startingIndex);
    if (!ignoreGroup && groupBy() && get(filteredItems)[hoverItemIndex()] && !get(filteredItems)[hoverItemIndex()].selectable) {
      setHoverIndex(1);
    }
  }
  function setupFilterText() {
    if (!loadOptions() && strict_equals(filterText().length, 0)) return;
    if (loadOptions()) {
      debounce()(
        async function() {
          loading(true);
          let res = await getItems2()({
            dispatch,
            loadOptions: loadOptions(),
            convertStringItemsToObjects,
            filterText: filterText()
          });
          if (res) {
            loading(res.loading);
            listOpen(listOpen() ? res.listOpen : filterText().length > 0 ? true : false);
            focused(listOpen() && res.focused);
            items(groupBy() ? filterGroupedItems(res.filteredItems) : res.filteredItems);
          } else {
            loading(false);
            focused(true);
            listOpen(true);
          }
        },
        debounceWait()
      );
    } else {
      listOpen(true);
      if (multiple()) {
        set(activeValue, void 0);
      }
    }
  }
  function handleFilterEvent(items2) {
    if (listOpen()) dispatch("filter", items2);
  }
  beforeUpdate(async () => {
    set(prev_value, value());
    set(prev_filterText, filterText());
    set(prev_multiple, multiple());
  });
  function computeJustValue() {
    if (multiple()) return value() ? value().map((item) => item[itemId()]) : null;
    return value() ? value()[itemId()] : value();
  }
  function checkValueForDuplicates() {
    let noDuplicates = true;
    if (value()) {
      const ids = [];
      const uniqueValues = [];
      value().forEach((val) => {
        if (!ids.includes(val[itemId()])) {
          ids.push(val[itemId()]);
          uniqueValues.push(val);
        } else {
          noDuplicates = false;
        }
      });
      if (!noDuplicates) value(uniqueValues);
    }
    return noDuplicates;
  }
  function findItem(selection) {
    let matchTo = selection ? selection[itemId()] : value()[itemId()];
    return items().find((item) => strict_equals(item[itemId()], matchTo));
  }
  function updateValueDisplay(items2) {
    if (!items2 || strict_equals(items2.length, 0) || items2.some((item) => strict_equals(typeof item, "object", false))) return;
    if (!value() || (multiple() ? value().some((selection) => !selection || !selection[itemId()]) : !value()[itemId()])) return;
    if (Array.isArray(value())) {
      value(value().map((selection) => findItem(selection) || selection));
    } else {
      value(findItem() || value());
    }
  }
  async function handleMultiItemClear(i) {
    const itemToRemove = value()[i];
    if (strict_equals(value().length, 1)) {
      value(void 0);
    } else {
      value(value().filter((item) => {
        return strict_equals(item, itemToRemove, false);
      }));
    }
    dispatch("clear", itemToRemove);
  }
  function handleKeyDown(e) {
    if (!focused()) return;
    e.stopPropagation();
    switch (e.key) {
      case "Escape":
        e.preventDefault();
        closeList();
        break;
      case "Enter":
        e.preventDefault();
        if (listOpen()) {
          if (strict_equals(get(filteredItems).length, 0)) break;
          const hoverItem = get(filteredItems)[hoverItemIndex()];
          if (value() && !multiple() && strict_equals(value()[itemId()], hoverItem[itemId()])) {
            closeList();
            break;
          } else {
            handleSelect(get(filteredItems)[hoverItemIndex()]);
          }
        }
        break;
      case "ArrowDown":
        e.preventDefault();
        if (listOpen()) {
          setHoverIndex(1);
        } else {
          listOpen(true);
          set(activeValue, void 0);
        }
        break;
      case "ArrowUp":
        e.preventDefault();
        if (listOpen()) {
          setHoverIndex(-1);
        } else {
          listOpen(true);
          set(activeValue, void 0);
        }
        break;
      case "Tab":
        if (listOpen() && focused()) {
          if (strict_equals(get(filteredItems).length, 0) || value() && strict_equals(value()[itemId()], get(filteredItems)[hoverItemIndex()][itemId()])) return closeList();
          e.preventDefault();
          handleSelect(get(filteredItems)[hoverItemIndex()]);
          closeList();
        }
        break;
      case "Backspace":
        if (!multiple() || filterText().length > 0) return;
        if (multiple() && value() && value().length > 0) {
          handleMultiItemClear(strict_equals(get(activeValue), void 0, false) ? get(activeValue) : value().length - 1);
          if (strict_equals(get(activeValue), 0) || strict_equals(get(activeValue), void 0)) break;
          set(activeValue, value().length > get(activeValue) ? get(activeValue) - 1 : void 0);
        }
        break;
      case "ArrowLeft":
        if (!value() || !multiple() || filterText().length > 0) return;
        if (strict_equals(get(activeValue), void 0)) {
          set(activeValue, value().length - 1);
        } else if (value().length > get(activeValue) && strict_equals(get(activeValue), 0, false)) {
          set(activeValue, get(activeValue) - 1);
        }
        break;
      case "ArrowRight":
        if (!value() || !multiple() || filterText().length > 0 || strict_equals(get(activeValue), void 0)) return;
        if (strict_equals(get(activeValue), value().length - 1)) {
          set(activeValue, void 0);
        } else if (get(activeValue) < value().length - 1) {
          set(activeValue, get(activeValue) + 1);
        }
        break;
    }
  }
  function handleFocus(e) {
    var _a;
    if (focused() && strict_equals(input(), document == null ? void 0 : document.activeElement)) return;
    if (e) dispatch("focus", e);
    (_a = input()) == null ? void 0 : _a.focus();
    focused(true);
  }
  async function handleBlur(e) {
    var _a;
    if (isScrolling) return;
    if (listOpen() || focused()) {
      dispatch("blur", e);
      closeList();
      focused(false);
      set(activeValue, void 0);
      (_a = input()) == null ? void 0 : _a.blur();
    }
  }
  function handleClick() {
    if (disabled()) return;
    if (filterText().length > 0) return listOpen(true);
    listOpen(!listOpen());
  }
  function handleClear() {
    dispatch("clear", value());
    value(void 0);
    closeList();
    handleFocus();
  }
  onMount(() => {
    if (listOpen()) focused(true);
    if (focused() && input()) input().focus();
  });
  function itemSelected(selection) {
    if (selection) {
      filterText("");
      const item = Object.assign({}, selection);
      if (item.groupHeader && !item.selectable) return;
      value(multiple() ? value() ? value().concat([item]) : [item] : value(item));
      setTimeout(() => {
        if (closeListOnChange()) closeList();
        set(activeValue, void 0);
        dispatch("change", value());
        dispatch("select", selection);
      });
    }
  }
  function closeList() {
    if (clearFilterTextOnBlur()) {
      filterText("");
    }
    listOpen(false);
  }
  let ariaValues = prop($$props, "ariaValues", 8, (values) => {
    return `Option ${values}, selected.`;
  });
  let ariaListOpen = prop($$props, "ariaListOpen", 8, (label2, count) => {
    return `You are currently focused on option ${label2}. There are ${count} results available.`;
  });
  let ariaFocused = prop($$props, "ariaFocused", 8, () => {
    return `Select is focused, type to refine list, press down to open the menu.`;
  });
  function handleAriaSelection(_multiple) {
    let selected = void 0;
    if (_multiple && value().length > 0) {
      selected = value().map((v) => v[label()]).join(", ");
    } else {
      selected = value()[label()];
    }
    return ariaValues()(selected);
  }
  function handleAriaContent() {
    if (!get(filteredItems) || strict_equals(get(filteredItems).length, 0)) return "";
    let _item = get(filteredItems)[hoverItemIndex()];
    if (listOpen() && _item) {
      let count = get(filteredItems) ? get(filteredItems).length : 0;
      return ariaListOpen()(_item[label()], count);
    } else {
      return ariaFocused()();
    }
  }
  let list = mutable_source(null);
  let isScrollingTimer;
  function handleListScroll() {
    clearTimeout(isScrollingTimer);
    isScrollingTimer = setTimeout(
      () => {
        isScrolling = false;
      },
      100
    );
  }
  function handleClickOutside(event2) {
    var _a;
    if (!listOpen() && !focused() && container() && !container().contains(event2.target) && !((_a = get(list)) == null ? void 0 : _a.contains(event2.target))) {
      handleBlur();
    }
  }
  onDestroy(() => {
    var _a;
    (_a = get(list)) == null ? void 0 : _a.remove();
  });
  let isScrolling = false;
  function handleSelect(item) {
    if (!item || strict_equals(item.selectable, false)) return;
    itemSelected(item);
  }
  function handleHover(i) {
    if (isScrolling) return;
    hoverItemIndex(i);
  }
  function handleItemClick(args) {
    const { item, i } = args;
    if (strict_equals(item == null ? void 0 : item.selectable, false)) return;
    if (value() && !multiple() && strict_equals(value()[itemId()], item[itemId()])) return closeList();
    if (isItemSelectable(item)) {
      hoverItemIndex(i);
      handleSelect(item);
    }
  }
  function setHoverIndex(increment) {
    let selectableFilteredItems = get(filteredItems).filter((item) => !Object.hasOwn(item, "selectable") || strict_equals(item.selectable, true));
    if (strict_equals(selectableFilteredItems.length, 0)) {
      return hoverItemIndex(0);
    }
    if (increment > 0 && strict_equals(hoverItemIndex(), get(filteredItems).length - 1)) {
      hoverItemIndex(0);
    } else if (increment < 0 && strict_equals(hoverItemIndex(), 0)) {
      hoverItemIndex(get(filteredItems).length - 1);
    } else {
      hoverItemIndex(hoverItemIndex() + increment);
    }
    const hover = get(filteredItems)[hoverItemIndex()];
    if (hover && strict_equals(hover.selectable, false)) {
      if (strict_equals(increment, 1) || strict_equals(increment, -1)) setHoverIndex(increment);
      return;
    }
  }
  function isItemActive(item, value2, itemId2) {
    if (multiple()) return;
    return value2 && strict_equals(value2[itemId2], item[itemId2]);
  }
  function isItemFirst(itemIndex) {
    return strict_equals(itemIndex, 0);
  }
  function isItemSelectable(item) {
    return item.groupHeader && item.selectable || item.selectable || !item.hasOwnProperty("selectable");
  }
  const activeScroll = scrollAction;
  const hoverScroll = scrollAction;
  function scrollAction(node) {
    return {
      update(args) {
        if (args.scroll) {
          handleListScroll();
          node.scrollIntoView({ behavior: "auto", block: "nearest" });
        }
      }
    };
  }
  function setListWidth() {
    const { width } = container().getBoundingClientRect();
    mutate(list, get(list).style.width = listAutoWidth() ? width + "px" : "auto");
  }
  let _floatingConfig = mutable_source({
    strategy: "absolute",
    placement: "bottom-start",
    middleware: [
      offset(listOffset()),
      flip(),
      shift()
    ],
    autoUpdate: false
  });
  const [floatingRef, floatingContent, floatingUpdate] = createFloatingActions(get(_floatingConfig));
  let prefloat = mutable_source(true);
  function listMounted(list2, listOpen2) {
    if (!list2 || !listOpen2) return set(prefloat, true);
    setTimeout(
      () => {
        set(prefloat, false);
      },
      0
    );
  }
  legacy_pre_effect(
    () => (deep_read_state(items()), deep_read_state(value())),
    () => {
      if (items(), value()) setValue();
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(inputAttributes()), deep_read_state(searchable())),
    () => {
      if (inputAttributes() || !searchable()) assignInputAttributes();
    }
  );
  legacy_pre_effect(() => deep_read_state(multiple()), () => {
    if (multiple()) setupMulti();
  });
  legacy_pre_effect(
    () => (get(prev_multiple), deep_read_state(multiple())),
    () => {
      if (get(prev_multiple) && !multiple()) setupSingle();
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(multiple()), deep_read_state(value())),
    () => {
      if (multiple() && value() && value().length > 1) checkValueForDuplicates();
    }
  );
  legacy_pre_effect(() => deep_read_state(value()), () => {
    if (value()) dispatchSelectedItem();
  });
  legacy_pre_effect(
    () => (deep_read_state(value()), deep_read_state(multiple()), get(prev_value)),
    () => {
      if (!value() && multiple() && get(prev_value)) dispatch("input", value());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(focused()), deep_read_state(input())),
    () => {
      if (!focused() && input()) closeList();
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(filterText()), get(prev_filterText)),
    () => {
      if (strict_equals(filterText(), get(prev_filterText), false)) setupFilterText();
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(filter2()), deep_read_state(loadOptions()), deep_read_state(filterText()), deep_read_state(items()), deep_read_state(multiple()), deep_read_state(value()), deep_read_state(itemId()), deep_read_state(groupBy()), deep_read_state(label()), deep_read_state(filterSelectedItems()), deep_read_state(itemFilter())),
    () => {
      set(filteredItems, filter2()({
        loadOptions: loadOptions(),
        filterText: filterText(),
        items: items(),
        multiple: multiple(),
        value: value(),
        itemId: itemId(),
        groupBy: groupBy(),
        label: label(),
        filterSelectedItems: filterSelectedItems(),
        itemFilter: itemFilter(),
        convertStringItemsToObjects,
        filterGroupedItems
      }));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(multiple()), deep_read_state(listOpen()), deep_read_state(value()), get(filteredItems)),
    () => {
      if (!multiple() && listOpen() && value() && get(filteredItems)) setValueIndexAsHoverIndex();
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(listOpen()), deep_read_state(multiple())),
    () => {
      if (listOpen() && multiple()) hoverItemIndex(0);
    }
  );
  legacy_pre_effect(() => deep_read_state(filterText()), () => {
    if (filterText()) hoverItemIndex(0);
  });
  legacy_pre_effect(() => deep_read_state(hoverItemIndex()), () => {
    dispatchHover(hoverItemIndex());
  });
  legacy_pre_effect(
    () => (deep_read_state(multiple()), deep_read_state(value())),
    () => {
      set(hasValue, multiple() ? value() && value().length > 0 : value());
    }
  );
  legacy_pre_effect(
    () => (get(hasValue), deep_read_state(filterText())),
    () => {
      set(hideSelectedItem, get(hasValue) && filterText().length > 0);
    }
  );
  legacy_pre_effect(
    () => (get(hasValue), deep_read_state(clearable()), deep_read_state(disabled()), deep_read_state(loading())),
    () => {
      set(showClear, get(hasValue) && clearable() && !disabled() && !loading());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(placeholderAlwaysShow()), deep_read_state(multiple()), deep_read_state(placeholder()), deep_read_state(value())),
    () => {
      var _a;
      set(placeholderText, placeholderAlwaysShow() && multiple() ? placeholder() : multiple() && strict_equals((_a = value()) == null ? void 0 : _a.length, 0) ? placeholder() : value() ? "" : placeholder());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(value()), deep_read_state(multiple())),
    () => {
      set(ariaSelection, value() ? handleAriaSelection(multiple()) : "");
    }
  );
  legacy_pre_effect(
    () => (get(filteredItems), deep_read_state(hoverItemIndex()), deep_read_state(focused()), deep_read_state(listOpen())),
    () => {
      set(ariaContext, handleAriaContent({
        filteredItems: get(filteredItems),
        hoverItemIndex: hoverItemIndex(),
        focused: focused(),
        listOpen: listOpen()
      }));
    }
  );
  legacy_pre_effect(() => deep_read_state(items()), () => {
    updateValueDisplay(items());
  });
  legacy_pre_effect(
    () => (deep_read_state(multiple()), deep_read_state(value()), deep_read_state(itemId())),
    () => {
      justValue(computeJustValue(multiple(), value(), itemId()));
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(multiple()), get(prev_value), deep_read_state(value())),
    () => {
      if (!multiple() && get(prev_value) && !value()) dispatch("input", value());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(listOpen()), get(filteredItems), deep_read_state(multiple()), deep_read_state(value())),
    () => {
      if (listOpen() && get(filteredItems) && !multiple() && !value()) checkHoverSelectable();
    }
  );
  legacy_pre_effect(() => get(filteredItems), () => {
    handleFilterEvent(get(filteredItems));
  });
  legacy_pre_effect(
    () => (deep_read_state(container()), deep_read_state(floatingConfig()), get(_floatingConfig)),
    () => {
      if (container() && floatingConfig()) floatingUpdate(Object.assign(get(_floatingConfig), floatingConfig()));
    }
  );
  legacy_pre_effect(() => get(list), () => {
    set(listDom, !!get(list));
  });
  legacy_pre_effect(
    () => (get(list), deep_read_state(listOpen())),
    () => {
      listMounted(get(list), listOpen());
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(listOpen()), deep_read_state(container()), get(list)),
    () => {
      if (listOpen() && container() && get(list)) setListWidth();
    }
  );
  legacy_pre_effect(() => deep_read_state(hoverItemIndex()), () => {
    set(scrollToHoverItem, hoverItemIndex());
  });
  legacy_pre_effect(
    () => (deep_read_state(input()), deep_read_state(listOpen()), deep_read_state(focused())),
    () => {
      if (input() && listOpen() && !focused()) handleFocus();
    }
  );
  legacy_pre_effect(
    () => (deep_read_state(container()), deep_read_state(floatingConfig())),
    () => {
      var _a;
      if (container() && strict_equals((_a = floatingConfig()) == null ? void 0 : _a.autoUpdate, void 0)) {
        mutate(_floatingConfig, get(_floatingConfig).autoUpdate = true);
      }
    }
  );
  legacy_pre_effect_reset();
  init();
  var div = root4();
  event("click", $window, handleClickOutside);
  event("keydown", $window, handleKeyDown);
  let classes;
  var node_1 = child(div);
  {
    var consequent_5 = ($$anchor2) => {
      var div_1 = root_1();
      let classes_1;
      var node_2 = child(div_1);
      {
        var consequent = ($$anchor3) => {
          var fragment = comment();
          var node_3 = first_child(fragment);
          slot(node_3, $$props, "list-prepend", {}, null);
          append($$anchor3, fragment);
        };
        if_block(node_2, ($$render) => {
          if ($$slots["list-prepend"]) $$render(consequent);
        });
      }
      var node_4 = sibling(node_2, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_5 = first_child(fragment_1);
          slot(
            node_5,
            $$props,
            "list",
            {
              get filteredItems() {
                return get(filteredItems);
              }
            },
            null
          );
          append($$anchor3, fragment_1);
        };
        var alternate = ($$anchor3, $$elseif) => {
          {
            var consequent_2 = ($$anchor4) => {
              var fragment_2 = comment();
              var node_6 = first_child(fragment_2);
              each(node_6, 1, () => get(filteredItems), index, ($$anchor5, item, i) => {
                var div_2 = root_6();
                var div_3 = child(div_2);
                let classes_2;
                var node_7 = child(div_3);
                slot(
                  node_7,
                  $$props,
                  "item",
                  {
                    get item() {
                      return get(item);
                    },
                    index: i
                  },
                  ($$anchor6) => {
                    var text2 = text();
                    template_effect(() => {
                      var _a;
                      return set_text(text2, (_a = get(item)) == null ? void 0 : _a[label()]);
                    });
                    append($$anchor6, text2);
                  }
                );
                reset(div_3);
                action(div_3, ($$node, $$action_arg) => activeScroll == null ? void 0 : activeScroll($$node, $$action_arg), () => ({
                  scroll: isItemActive(get(item), value(), itemId()),
                  listDom: get(listDom)
                }));
                action(div_3, ($$node, $$action_arg) => hoverScroll == null ? void 0 : hoverScroll($$node, $$action_arg), () => ({
                  scroll: strict_equals(get(scrollToHoverItem), i),
                  listDom: get(listDom)
                }));
                reset(div_2);
                template_effect(
                  ($0) => classes_2 = set_class(div_3, 1, "item s-413vZPMk7oiT", null, classes_2, $0),
                  [
                    () => {
                      var _a;
                      return {
                        "list-group-title": get(item).groupHeader,
                        active: isItemActive(get(item), value(), itemId()),
                        first: isItemFirst(i),
                        hover: strict_equals(hoverItemIndex(), i),
                        "group-item": get(item).groupItem,
                        "not-selectable": strict_equals((_a = get(item)) == null ? void 0 : _a.selectable, false)
                      };
                    }
                  ],
                  derived_safe_equal
                );
                event("mouseover", div_2, () => handleHover(i));
                event("focus", div_2, () => handleHover(i));
                event("click", div_2, stopPropagation(() => handleItemClick({ item: get(item), i })));
                event("keydown", div_2, preventDefault(stopPropagation(function($$arg) {
                  bubble_event.call(this, $$props, $$arg);
                })));
                append($$anchor5, div_2);
              });
              append($$anchor4, fragment_2);
            };
            var alternate_1 = ($$anchor4, $$elseif2) => {
              {
                var consequent_3 = ($$anchor5) => {
                  var fragment_4 = comment();
                  var node_8 = first_child(fragment_4);
                  slot(node_8, $$props, "empty", {}, ($$anchor6) => {
                    var div_4 = root_10();
                    append($$anchor6, div_4);
                  });
                  append($$anchor5, fragment_4);
                };
                if_block(
                  $$anchor4,
                  ($$render) => {
                    if (!hideEmptyState()) $$render(consequent_3);
                  },
                  $$elseif2
                );
              }
            };
            if_block(
              $$anchor3,
              ($$render) => {
                if (get(filteredItems).length > 0) $$render(consequent_2);
                else $$render(alternate_1, false);
              },
              $$elseif
            );
          }
        };
        if_block(node_4, ($$render) => {
          if ($$slots.list) $$render(consequent_1);
          else $$render(alternate, false);
        });
      }
      var node_9 = sibling(node_4, 2);
      {
        var consequent_4 = ($$anchor3) => {
          var fragment_5 = comment();
          var node_10 = first_child(fragment_5);
          slot(node_10, $$props, "list-append", {}, null);
          append($$anchor3, fragment_5);
        };
        if_block(node_9, ($$render) => {
          if ($$slots["list-append"]) $$render(consequent_4);
        });
      }
      reset(div_1);
      action(div_1, ($$node) => floatingContent == null ? void 0 : floatingContent($$node));
      bind_this(div_1, ($$value) => set(list, $$value), () => get(list));
      effect(() => event("scroll", div_1, handleListScroll));
      effect(() => event("pointerup", div_1, preventDefault(stopPropagation(function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      }))));
      effect(() => event("mousedown", div_1, preventDefault(stopPropagation(function($$arg) {
        bubble_event.call(this, $$props, $$arg);
      }))));
      template_effect(($0) => classes_1 = set_class(div_1, 1, "svelte-select-list s-413vZPMk7oiT", null, classes_1, $0), [() => ({ prefloat: get(prefloat) })], derived_safe_equal);
      append($$anchor2, div_1);
    };
    if_block(node_1, ($$render) => {
      if (listOpen()) $$render(consequent_5);
    });
  }
  var span = sibling(node_1, 2);
  var node_11 = child(span);
  {
    var consequent_6 = ($$anchor2) => {
      var fragment_6 = root_12();
      var span_1 = first_child(fragment_6);
      var text_1 = child(span_1, true);
      reset(span_1);
      var span_2 = sibling(span_1, 2);
      var text_2 = child(span_2, true);
      reset(span_2);
      template_effect(() => {
        set_text(text_1, get(ariaSelection));
        set_text(text_2, get(ariaContext));
      });
      append($$anchor2, fragment_6);
    };
    if_block(node_11, ($$render) => {
      if (focused()) $$render(consequent_6);
    });
  }
  reset(span);
  var div_5 = sibling(span, 2);
  var node_12 = child(div_5);
  slot(node_12, $$props, "prepend", {}, null);
  reset(div_5);
  var div_6 = sibling(div_5, 2);
  var node_13 = child(div_6);
  {
    var consequent_9 = ($$anchor2) => {
      var fragment_7 = comment();
      var node_14 = first_child(fragment_7);
      {
        var consequent_8 = ($$anchor3) => {
          var fragment_8 = comment();
          var node_15 = first_child(fragment_8);
          each(node_15, 1, value, index, ($$anchor4, item, i) => {
            var div_7 = root_15();
            let classes_3;
            var span_3 = child(div_7);
            var node_16 = child(span_3);
            slot(
              node_16,
              $$props,
              "selection",
              {
                get selection() {
                  return get(item);
                },
                index: i
              },
              ($$anchor5) => {
                var text_3 = text();
                template_effect(() => set_text(text_3, get(item)[label()]));
                append($$anchor5, text_3);
              }
            );
            reset(span_3);
            var node_17 = sibling(span_3, 2);
            {
              var consequent_7 = ($$anchor5) => {
                var div_8 = root_17();
                var node_18 = child(div_8);
                slot(node_18, $$props, "multi-clear-icon", {}, ($$anchor6) => {
                  var fragment_10 = comment();
                  var node_19 = first_child(fragment_10);
                  ClearIcon_default(node_19, {});
                  append($$anchor6, fragment_10);
                });
                reset(div_8);
                event("pointerup", div_8, preventDefault(stopPropagation(() => handleMultiItemClear(i))));
                append($$anchor5, div_8);
              };
              if_block(node_17, ($$render) => {
                if (!disabled() && !multiFullItemClearable() && ClearIcon_default) $$render(consequent_7);
              });
            }
            reset(div_7);
            template_effect(
              ($0) => classes_3 = set_class(div_7, 1, "multi-item s-413vZPMk7oiT", null, classes_3, $0),
              [
                () => ({
                  active: strict_equals(get(activeValue), i),
                  disabled: disabled()
                })
              ],
              derived_safe_equal
            );
            event("click", div_7, preventDefault(() => multiFullItemClearable() ? handleMultiItemClear(i) : {}));
            event("keydown", div_7, preventDefault(stopPropagation(function($$arg) {
              bubble_event.call(this, $$props, $$arg);
            })));
            append($$anchor4, div_7);
          });
          append($$anchor3, fragment_8);
        };
        var alternate_2 = ($$anchor3) => {
          var div_9 = root_19();
          let classes_4;
          var node_20 = child(div_9);
          slot(
            node_20,
            $$props,
            "selection",
            {
              get selection() {
                return value();
              }
            },
            ($$anchor4) => {
              var text_4 = text();
              template_effect(() => set_text(text_4, value()[label()]));
              append($$anchor4, text_4);
            }
          );
          reset(div_9);
          template_effect(
            ($0) => classes_4 = set_class(div_9, 1, "selected-item s-413vZPMk7oiT", null, classes_4, $0),
            [
              () => ({
                "hide-selected-item": get(hideSelectedItem)
              })
            ],
            derived_safe_equal
          );
          append($$anchor3, div_9);
        };
        if_block(node_14, ($$render) => {
          if (multiple()) $$render(consequent_8);
          else $$render(alternate_2, false);
        });
      }
      append($$anchor2, fragment_7);
    };
    if_block(node_13, ($$render) => {
      if (get(hasValue)) $$render(consequent_9);
    });
  }
  var input_1 = sibling(node_13, 2);
  remove_input_defaults(input_1);
  let attributes;
  bind_this(input_1, ($$value) => input($$value), () => input());
  reset(div_6);
  var div_10 = sibling(div_6, 2);
  var node_21 = child(div_10);
  {
    var consequent_10 = ($$anchor2) => {
      var div_11 = root_21();
      var node_22 = child(div_11);
      slot(node_22, $$props, "loading-icon", {}, ($$anchor3) => {
        var fragment_12 = comment();
        var node_23 = first_child(fragment_12);
        LoadingIcon_default(node_23, {});
        append($$anchor3, fragment_12);
      });
      reset(div_11);
      append($$anchor2, div_11);
    };
    if_block(node_21, ($$render) => {
      if (loading()) $$render(consequent_10);
    });
  }
  var node_24 = sibling(node_21, 2);
  {
    var consequent_11 = ($$anchor2) => {
      var button = root_23();
      var node_25 = child(button);
      slot(node_25, $$props, "clear-icon", {}, ($$anchor3) => {
        var fragment_13 = comment();
        var node_26 = first_child(fragment_13);
        ClearIcon_default(node_26, {});
        append($$anchor3, fragment_13);
      });
      reset(button);
      event("click", button, handleClear);
      append($$anchor2, button);
    };
    if_block(node_24, ($$render) => {
      if (get(showClear)) $$render(consequent_11);
    });
  }
  var node_27 = sibling(node_24, 2);
  {
    var consequent_12 = ($$anchor2) => {
      var div_12 = root_25();
      var node_28 = child(div_12);
      slot(
        node_28,
        $$props,
        "chevron-icon",
        {
          get listOpen() {
            return listOpen();
          }
        },
        ($$anchor3) => {
          var fragment_14 = comment();
          var node_29 = first_child(fragment_14);
          ChevronIcon_default(node_29, {});
          append($$anchor3, fragment_14);
        }
      );
      reset(div_12);
      append($$anchor2, div_12);
    };
    if_block(node_27, ($$render) => {
      if (showChevron()) $$render(consequent_12);
    });
  }
  reset(div_10);
  var node_30 = sibling(div_10, 2);
  slot(
    node_30,
    $$props,
    "input-hidden",
    {
      get value() {
        return value();
      }
    },
    ($$anchor2) => {
      var input_2 = root_27();
      remove_input_defaults(input_2);
      template_effect(
        ($0) => {
          set_attribute(input_2, "name", name());
          set_value(input_2, $0);
        },
        [
          () => value() ? JSON.stringify(value()) : null
        ],
        derived_safe_equal
      );
      append($$anchor2, input_2);
    }
  );
  var node_31 = sibling(node_30, 2);
  {
    var consequent_13 = ($$anchor2) => {
      var fragment_15 = comment();
      var node_32 = first_child(fragment_15);
      slot(
        node_32,
        $$props,
        "required",
        {
          get value() {
            return value();
          }
        },
        ($$anchor3) => {
          var select = root_29();
          append($$anchor3, select);
        }
      );
      append($$anchor2, fragment_15);
    };
    if_block(node_31, ($$render) => {
      if (required() && (!value() || strict_equals(value().length, 0))) $$render(consequent_13);
    });
  }
  reset(div);
  effect(() => event("pointerup", div, preventDefault(handleClick)));
  bind_this(div, ($$value) => container($$value), () => container());
  action(div, ($$node) => floatingRef == null ? void 0 : floatingRef($$node));
  template_effect(
    ($0) => {
      classes = set_class(div, 1, `svelte-select ${containerClasses() ?? ""}`, "s-413vZPMk7oiT", classes, $0);
      set_style(div, containerStyles());
      attributes = set_attributes(
        input_1,
        attributes,
        {
          readOnly: !searchable(),
          ...get(_inputAttributes),
          placeholder: get(placeholderText),
          style: inputStyles(),
          disabled: disabled()
        },
        "s-413vZPMk7oiT"
      );
    },
    [
      () => ({
        multi: multiple(),
        disabled: disabled(),
        focused: focused(),
        "list-open": listOpen(),
        "show-chevron": showChevron(),
        error: hasError()
      })
    ],
    derived_safe_equal
  );
  event("keydown", input_1, handleKeyDown);
  event("blur", input_1, handleBlur);
  event("focus", input_1, handleFocus);
  bind_value(input_1, filterText);
  append($$anchor, div);
  bind_prop($$props, "getFilteredItems", getFilteredItems);
  bind_prop($$props, "handleClear", handleClear);
  return pop({
    get getFilteredItems() {
      return getFilteredItems;
    },
    get handleClear() {
      return handleClear;
    },
    ...legacy_api()
  });
}
if (import.meta.hot) {
  Select = hmr(Select, () => Select[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-413vZPMk7oiT");
    module.default[HMR].source = Select[HMR].source;
    set(Select[HMR].source, module.default[HMR].original);
  });
}
var Select_default = Select;
export {
  Select_default as default
};
//# sourceMappingURL=svelte-select.js.map
